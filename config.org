#+TITLE: My Emacs Configuration
#+AUTHOR: Jack Hunt
#+OPTIONS: toc:3

* Straight Setup
Really, it would make more sense intuitively for this to be further down,
but it's easier to just make sure the package management stuff is dealt
with up front before proceeding when this is tangled out and executed.
** Bootstrap
Bootstrapping is done in =init.el= so that Straight is setup before
org mode is used. This is because of potential org version
clashes when =org= is installed with Straight (as a dep) later in the config.

** Configure =use-package=
#+BEGIN_SRC emacs-lisp
(use-package straight
  :custom
  (straight-use-package-by-default t))
#+END_SRC

** Setup Package Updates
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  (auto-package-update-at-time "11:00")
  :config
  (auto-package-update-maybe))
#+END_SRC

** Mac Specific Env Setup
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))

#+END_SRC

* General Setup
** UI Behaviour
#+BEGIN_SRC emacs-lisp
(defun jh/setup-ui ()
  "Configure UI elements for graphical display."
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (global-hl-line-mode 1))

(when (display-graphic-p)
  (jh/setup-ui))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
#+END_SRC

** Unmap =C-[=
=C-[= maps to =ESC=, which is annoyingly close to =C-p=, meaning it's easy
to accidentally close all windows.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "ESC ESC ESC"))
#+END_SRC

** General Editor Setup
#+BEGIN_SRC emacs-lisp
;; Match parens, quotations etc.
(use-package elec-pair
  :ensure nil ; built-in
  :config
  (electric-pair-mode 1))


;; Nuke trailing whitespace on save.
(add-hook 'before-save-hook (lambda () (delete-trailing-whitespace)))

;; Tabs are evil.
(setq-default
  indent-tabs-mode nil
  tab-width 4
  indent-line-function #'insert-tab)

;; Don't store backup files with sources - it's a pain with git.
(setq backup-directory-alist
      `(("." . , (expand-file-name "backups" temporary-file-directory))))

;; Ditto for autosaves.
(setq auto-save-file-name-transforms `((".*" , temporary-file-directory t)))

;; Line & column numbers. Disabled for org & term.
(column-number-mode 1)
(global-display-line-numbers-mode t)

(dolist (hook '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook hook (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Mac Specific
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (defun jh/insert-sharp ()
    "Insert a sharp (#) character."
    (interactive)
    (insert "#"))

  (global-set-key (kbd "M-3") #'jh/insert-sharp))

#+END_SRC

** Helper Functions
TODO: Update this to regenerate from org
#+BEGIN_SRC emacs-lisp
(defun jh/reload-config ()
  "Reload the Emacs configuration file."
  (interactive)
  (condition-case err
      (progn
        (load-file (expand-file-name "init.el" user-emacs-directory))
        (message "Emacs config reloaded successfully."))
    (error (message "Error reloading config: %s" err))))
#+END_SRC

* Environment Setup
** Mac Specific
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (progn
      (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
      (add-to-list 'exec-path "/Library/TeX/texbin/"))
  (add-to-list 'exec-path "/Library/TeX/texbin/"))
#+END_SRC

** TRAMP
#+BEGIN_SRC emacs-lisp
(setq tramp-login-shell "/bin/bash")
(setq tramp-login-args '(("-l")))

(with-eval-after-load 'tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))

(use-package tramp
  :ensure nil  ;; built-in
  :custom
  (tramp-login-shell "/bin/bash")
  (tramp-login-args '("-l"))
  :config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+END_SRC

* Prettifying
** Theme
#+BEGIN_SRC emacs-lisp
;; doom-acario-dark
;; doom-badger
;; doom-dracula
;; doom-city-lights
;; doom-challenger-deep
;; doom-moonlight
;; doom-outrun-electric
(use-package doom-themes
  :init
  (load-theme 'doom-moonlight t))
#+END_SRC

** Colourful Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Indent Highlighting
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :hook
  (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+END_SRC

** Fancy Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :custom
  ((doom-modeline-height 20)))
#+END_SRC

** Fancy Icons
Note that for these to render properly, =nerd-icons-install-fonts= must be run.
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package treemacs-nerd-icons
  :config
  (treemacs-load-theme "nerd-icons"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-ivy-rich
  :ensure t
  :after
  ivy-rich-mode
  :init
  (nerd-icons-ivy-rich-mode 1)
  (ivy-rich-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-completion
  :config
  (nerd-icons-completion-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+END_SRC

** Ligatures
#+BEGIN_SRC emacs-lisp
;; Emacs 27.x has issues with ligatures
(when (version< "28.0" emacs-version)
  (use-package ligature
    :config
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                         ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                         "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                         "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                         "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                         "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                         "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                         "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                         "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                         "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
    (global-ligature-mode t)))
#+END_SRC

** Idle Highlighting
#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :config
  (setq idle-highlight-idle-time 0.2)
  :hook
  ((prog-mode text-mode) . idle-highlight-mode))
#+END_SRC

* Apps
** Emacs Everywhere
#+BEGIN_SRC emacs-lisp
(use-package emacs-everywhere)
#+END_SRC

** Learning and Typing
#+BEGIN_SRC emacs-lisp
(use-package speed-type)

(use-package key-quiz)

(use-package which-key
  :init
  (which-key-mode)
  :diminish
  which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC

** Better Docs for =C-h v= etc
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

* General Modes
** Ivy & Counsel
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind
  (("C-s" . swiper)
   :map ivy-minibuffer-map
   ("TAB" . ivy-partial-or-done)
   ("C-l" . ivy-alt-done)
   ("C-j" . ivy-next-line)
   ("C-k" . ivy-previous-line)
   :map ivy-switch-buffer-map
   ("C-k" . ivy-previous-line)
   ("C-l" . ivy-done)
   ("C-d" . ivy-switch-buffer-kill)
   :map ivy-reverse-i-search-map
   ("C-k" . ivy-previous-line)
   ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
  (("M-x" . counsel-M-x)
   ("C-x b" . counsel-ibuffer)
   ("C-x C-f" . counsel-find-file)
   :map minibuffer-local-map
   ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :after
  lsp-mode
  :init
  (global-company-mode)
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-selection)
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.0))

(use-package company-box
  :after
  company
  :hook
  (company-mode . company-box-mode))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :after
  company-mode
  :init
  (yas-global-mode)
  :bind
  ("C-c y s" . yas-insert-snippet)
  ("C-c y v" . yas-visit-snippet-file)
  :config
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (add-to-list 'company-backends 'company-yasnippet))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; TODO: Check out the other buffers.
;; https://magit.vc/manual/magit/Switching-Buffers.html
(use-package diff-hl
  :hook
  ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
   (magit-post-refresh-hook . diff-hl-magit-post-refresh)))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode))
#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :init
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  :config
  (setq ispell-dictionary "british"))
#+END_SRC

* Terminals
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))
#+END_SRC

* LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook
  ((python-mode . lsp)
   (ess-mode . lsp)
   (haskell-mode . lsp)
   (LaTeX-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after
  lsp-mode
  :commands
  lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode))

(use-package lsp-ivy
  :after
  lsp-mode
  :commands
  lsp-ivy-workspace-symbol)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :after lsp-mode)
#+END_SRC

** Jupyter
Note that the following dependencies need to be installed
#+BEGIN_EXAMPLE
brew install autoconf automake libtool
#+END_EXAMPLE
and if the ZMQ build fails, the following might need to be done
#+BEGIN_EXAMPLE
cd ~/.emacs.d/straight/build/zmq/src
autoreconf -i
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package jupyter
  :after (:all org python))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/jupyter-refresh-kernelspecs ()
  "Refresh Jupyter kernelspecs"
  (interactive)
  (jupyter-available-kernelspecs t))
#+END_SRC

* Language Specific
** Elisp
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'emacs-lisp-mode
  (add-to-list 'company-backends 'company-elisp))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after
  python-mode
  :config
  (pyvenv-mode 1))

(setenv "WORKON_HOME" "~/venvs")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package python-black
  :after python)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sphinx-doc
  :config
  (setq sphinx-doc-include-types t)
  :hook
  (python-mode . sphinx-doc-mode)
  :after python)
#+END_SRC

** R & STAN
#+BEGIN_SRC emacs-lisp
(use-package ess
  :hook
  ((ess-mode-hook . (lambda ()(ess-set-style 'DEFAULT)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package stan-mode)
#+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
(setq sh-basic-offset 2)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-haskell
  :after haskell-mode)
#+END_SRC

** LaTeX
#+BEGIN_SRC emacs-lisp
(when (version< "28.0" emacs-version)
  (use-package auctex
    :defer t
    :hook
    ((LaTeX-mode-hook . visual-line-mode)
     (LaTeX-mode-hook . flyspell-mode)
     (LaTeX-mode-hook . flycheck-mode)
     (LaTeX-mode-hook . LaTeX-math-mode))
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
    (setq LaTeX-indent-level 2)
    (setq LaTeX-item-indent 2)
    (setq TeX-brace-indent-level 2)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (version< "28.0" emacs-version)
  (use-package reftex
    :after
    auctex
    :hook
    (LaTeX-mode-hook . turn-on-reftex)
    :config
    (setq reftex-plug-into-AUCTeX t)))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

* Org Mode
** Fancy Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC

** Olivetti Mode
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :hook
  ((org-mode . olivetti-mode))
  :config
  (setq olivetti-body-width 100))
#+END_SRC

** Utility Functions
*** Theme to CSS
TODO: Verify this still works
#+BEGIN_SRC emacs-lisp
(defun jh/theme-to-css (filename)
  "Generate a CSS file based on current theme for Org HTML export."
  (interactive "FEnter the output CSS file name: ")
  (with-temp-file filename
    ;; Document background & foreground.
    (let ((default-bg (face-background 'default))
          (default-fg (face-foreground 'default)))
      (insert (format "body {\n  background-color: %s;\n  color: %s;\n}\n" default-bg default-fg)))

    ;; Headings.
    (let ((level-1-bg (face-background 'org-level-1))
          (level-1-fg (face-foreground 'org-level-1)))
      (insert (format "h1 {\n  background-color: %s;\n  color: %s;\n}\n" level-1-bg level-1-fg)))
    (let ((level-2-bg (face-background 'org-level-2))
          (level-2-fg (face-foreground 'org-level-2)))
      (insert (format "h2 {\n  background-color: %s;\n  color: %s;\n}\n" level-2-bg level-2-fg)))
    (let ((level-3-bg (face-background 'org-level-3))
          (level-3-fg (face-foreground 'org-level-3)))
      (insert (format "h3 {\n  background-color: %s;\n  color: %s;\n}\n" level-3-bg level-3-fg)))
    (let ((level-4-bg (face-background 'org-level-4))
          (level-4-fg (face-foreground 'org-level-4)))
      (insert (format "h4 {\n  background-color: %s;\n  color: %s;\n}\n" level-4-bg level-4-fg)))
    ))
#+END_SRC

*** Export to Jupyter
#+BEGIN_SRC emacs-lisp
(defun jh/org-to-ipynb-with-pandoc ()
  "Convert the current Org mode buffer to a Jupyter Notebook using Pandoc."
  (interactive)
  (let* ((org-file (buffer-file-name))
         (base-name (file-name-sans-extension org-file))
         (ipynb-file (concat base-name ".ipynb"))
         (command (format "pandoc --from=org --to=ipynb %s -o %s"
                          (shell-quote-argument org-file)
                          (shell-quote-argument ipynb-file))))
    (if (not (string-equal (file-name-extension org-file) "org"))
        (message "Not an Org file.")
      (save-buffer)
      (shell-command command)
      (message "Converted '%s' to '%s'" org-file ipynb-file))))
#+END_SRC

*** Archive Done Tasks
#+BEGIN_SRC emacs-lisp
(defun jh/org-archive-done-kill-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree "1/DONE|1/KILL" 'file))
#+END_SRC

*** Update Last Modified Timestamp
#+BEGIN_SRC emacs-lisp
(defun jh/org-last-modified-update ()
  "Update '#+last_modified:' if it exists in an org buffer."
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^#\\+last_modified: .*" nil t)
      (replace-match (concat "#+last_modified: " (format-time-string "[%Y-%m-%d %a %H:%M]"))))))
#+END_SRC

*** New Capture via Alfred
#+BEGIN_SRC emacs-lisp
;; https://github.com/jjasghar/alfred-org-capture/blob/master/el/alfred-org-capture.el
(defun make-orgcapture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "remember") (width . 80) (height . 16)
                (top . 400) (left . 300)
                ))
  (select-frame-by-name "remember")
  (org-capture))
#+END_SRC

** Setup
#+BEGIN_SRC emacs-lisp
(defun jh/display-ansi-colours ()
  "Fixes kernel output in emacs-jupyter"
  (ansi-color-apply-on-region (point-min) (point-max)))

(defun jh/org-mode-setup ()
  ;; Update roam timestamps.
  (add-hook 'before-save-hook 'jh/org-last-modified-update nil 'local)

  ;; TODO states.
  (setq org-todo-keywords
        '((sequence "TODO" "STRT" "IDEA" "WAIT" "|" "DONE" "KILL")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "cyan" :weight bold))
          ("STRT" . (:foreground "yellow" :weight bold))
          ("IDEA" . (:foreground "pink" :weight bold))
          ("WAIT" . (:foreground "orange" :weight bold))
          ("DONE" . (:foreground "green" :strike-through t))
          ("KILL" . (:foreground "red" :strike-through t))))


  ;; Make source blocks look a bit nicer.
  (setq org-edit-src-content-indentation 0
        org-src-tab-acts-natively t
        org-src-preserve-indentation t
        org-src-fontify-natively t)

  ;; Make LaTeX previews a bit bigger.
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  ;; (setq org-src-window-setup 'current-window)
  (setq org-ellipsis "⤵")

  ;; Enable spell checking.
  (add-hook 'org-mode-hook 'flyspell-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)
     (shell . t)
     (emacs-lisp . t)
     (jupyter . t)))

  ;;(setq org-export-with-smart-quotes t)
  (setq org-confirm-babel-evaluate nil)

  ;; Enable inline images and make sure they get updated.
  (add-hook 'org-mode-hook 'org-display-inline-images)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (setq org-display-remote-inline-images 'cache)
  (add-hook 'org-babel-after-execute-hook 'jh/display-ansi-colours)

  ;; For Auctex
  (set-default 'preview-default-document-pt 12)
  (set-default 'preview-scale-function 1.6)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/add-org-capture-templates ()
  (setq org-capture-templates
        '(("t" "Theoretical Question" entry
           (file+headline "~/org-mode/work.org" "Theoretical Questions")
           (file "~/.emacs.d/org/work_templates/theoretical_question.org") :empty-lines-after 1)
          ("e" "Experiment" entry
           (file+headline "~/org-mode/work.org" "Experiments")
           (file "~/.emacs.d/org/work_templates/experiment.org") :empty-lines-after 1)
          ("s" "Software Engineering" entry
           (file+headline "~/org-mode/work.org" "Engineering Tasks")
           (file "~/.emacs.d/org/work_templates/software_engineering.org") :empty-lines-after 1)
          ))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/org-refresh-latex-previews ()
  "Clear and regenerate LaTeX previews in the current buffer."
  (interactive)
  (org-clear-latex-preview)
  (org-latex-preview)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'jh/org-mode-setup)
(add-hook 'org-mode-hook #'jh/add-org-capture-templates)
(add-hook 'org-mode-hook #'yas-minor-mode)
#+END_SRC

* Org Roam
#+BEGIN_SRC emacs-lisp
(use-package emacsql)
;; (use-package emacsql-sqlite)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "~/org-mode/roam-notes"))
  (org-roam-db-location (file-truename "~/org-mode/roam-notes/org-roam.sqlite3"))
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'ivy)
  (org-roam-database-connector sqlite-builtin)
  (org-roam-capture-templates
   ;; TODO: See if the headers can be in the org files.
   '(("z" "Zettel" plain
      (file "~/.emacs.d/org/roam_templates/default.org")
      :target (file+head "zettel/%<%Y%m%d%H%M%>-${slug}.org"
                         "\n#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: :some_tag:\n\n")
      :unnarrowed t)
     ("k" "Zettel KB" plain
      (file "~/.emacs.d/org/roam_templates/default.org")
      :target (file+head "zettel_kb/${slug}.org"
                         "\n#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: :some_tag:\n\n")
      :unnarrowed t)
     ("w" "Work Zettel" plain
      (file "~/.emacs.d/org/roam_templates/default.org")
      :target (file+head "work_zettel/%<%Y%m%d%H%M%>-${slug}.org"
                         "\n#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: :work:\n\n")
      :unnarrowed t)
     ("m" "Work Meeting" plain
      (file "~/.emacs.d/org/roam_templates/default.org")
      :target (file+head "work_meetings/{title}.org"
                         "\n#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: :meeting:\n\n")
      :unnarrowed t)
     ))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n g" . org-roam-graph)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n c" . org-roam-capture)
   ("C-c n j" . org-roam-dailies-capture-today))
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:30}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol))
#+END_SRC
