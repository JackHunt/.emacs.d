#+TITLE: Emacs Config
#+AUTHOR: Jack Hunt
#+EMAIL: jackmileshunt@gmail.com
#+TOC: headlines 3

* Base Emacs Settings
** Configuration Parsing and Package Management
   Fix for emacs < 26.3
   #+BEGIN_SRC emacs-lisp
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   #+END_SRC

   Don't write out to =init.el=.
   #+BEGIN_SRC emacs-lisp
     (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

   Set up MELPA and =package=.
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
     (package-refresh-contents)
     (package-initialize)
   #+END_SRC

   Require =use-package=.
   #+BEGIN_SRC emacs-lisp
     (package-install 'use-package)
     (eval-when-compile
       (require 'use-package))
   #+END_SRC

   Always compile and use the latest package versions with =auto-compile=.
   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :ensure t
       :config
       (auto-compile-on-load-mode))
     (setq load-prefer-newer t)
   #+END_SRC

** UI & Editing
   Set user information.
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Jack Miles Hunt"
           user-mail-address "jackmileshunt@gmail.com")
   #+END_SRC

   Disable menu and scroll bar.
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (when window-system
       (scroll-bar-mode -1))
   #+END_SRC

   Enable current line highlighting.
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

   Install and set theme.
   #+BEGIN_SRC emacs-lisp
     (use-package atom-one-dark-theme
       :ensure t)
     (load-theme 'atom-one-dark t)
   #+END_SRC

   Set the window font to =fira-code=.
   #+BEGIN_SRC emacs-lisp
     (use-package fira-code-mode
       :ensure t
       :config (global-fira-code-mode))

     (when (window-system)
       (set-frame-font "Fira Code"))
   #+END_SRC

   Set auto scroll for compilation buffer.
   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
   #+END_SRC

   Use =smart-mode-line=.
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t)

     (sml/setup)
   #+END_SRC

   Enable highlighting of matching brackets.
   #+BEGIN_SRC emacs-lisp
     (setq show-paren-style 'mixed)
     (setq show-paren-delay 0)
     (show-paren-mode 1)
   #+END_SRC

   Use Spaces instead of Tabs and set width.
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
   #+END_SRC

** Key Bindings.
   Fix =#= key on a Mac.
   #+BEGIN_SRC emacs-lisp
     (if (eq system-type 'darwin)
         (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#"))))
   #+END_SRC

   Disable arrow keys.
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "<left>"))
     (global-unset-key (kbd "<right>"))
     (global-unset-key (kbd "<up>"))
     (global-unset-key (kbd "<down>"))
     (global-unset-key (kbd "<C-left>"))
     (global-unset-key (kbd "<C-right>"))
     (global-unset-key (kbd "<C-up>"))
     (global-unset-key (kbd "<C-down>"))
     (global-unset-key (kbd "<M-left>"))
     (global-unset-key (kbd "<M-right>"))
     (global-unset-key (kbd "<M-up>"))
     (global-unset-key (kbd "<M-down>"))
   #+END_SRC
   
** Environment
   Ensure environment variables are available when starting Emacs GUI.
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))
   #+end_src
* Language Agnostic Packages
** Flyspell.
*** Setup
    Setup =flyspell= to use the British dictionary and add a hook
    for text mode.
    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :ensure t
        :init
        (dolist (hook '(text-mode-hook))
          (add-hook hook (lambda () (flyspell-mode 1))))
        :config
        (setq ispell-dictionary "british"))
    #+END_SRC
*** Useful Commands
    | Task                        | Cmd                              | Alt Cmd | Notes              |
    |-----------------------------+----------------------------------+---------+--------------------|
    | Check current word spelling | =M-x ispell-word=                | =M-$=   |                    |
    | Spell check current buffer  | =M-x flyspell-buffer=            |         |                    |
    | Enable =flyspell-mode=      | =M-x flyspell-mode=              |         |                    |
    | Goto next error             | =M-x flyspell-goto-next-error=   | =C-,=   | In =flyspell-mode= |
    | Correct an error            | =M-x flyspell-auto-correct-word= | =C-.=   | In =flyspell-mode= |

** Org Mode
*** Setup
    Use alternative bullet display for =org=.
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :init
        (add-hook 'org-mode-hook #'org-bullets-mode))
      :config
      (setq org-ellipsis "â¤µ")
    #+END_SRC

    Add =flyspell= hook.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'flyspell-mode)
    #+END_SRC

    Configure source code blocks.
    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-src-window-setup 'current-window)
    #+END_SRC

    Fix quotations when exporting.
    #+BEGIN_SRC emacs-lisp
      (setq org-export-with-smart-quotes t)
    #+END_SRC

    Function to archive tasks marked =DONE=.
    #+BEGIN_SRC emacs-lisp
      (defun org-archive-done-tasks ()
        (interactive)
        (org-map-entries 'org-archive-subtree "/DONE" 'file))
    #+END_SRC

    Enable =babel= language evaluation in =org=.
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (haskell . t) ;; Needs lhs2tex
         (python . t)
         (shell . t)
         (latex . t)))
    #+END_SRC

    Require =ob-sh=.
    #+BEGIN_SRC emacs-lisp
      (require 'ob-shell)
    #+END_SRC
*** Useful Commands
    | Task                          | Cmd                   | Alt Cmd | Notes |
    |-------------------------------+-----------------------+---------+-------|
    | Move heading up/down          | =M-up= / =M-down=     |         |       |
    | Promote/demote heading        | =M-left= / =M-right=  |         |       |
    | Scroll TODO state             | =M-left= / =M-right=  |         |       |
    | Agenda                        | =C-c a=               |         |       |
    | Add/remove document in agenda | =C-c [= / =C-c ]=     |         |       |
    | Add date or time/date         | =C-c .= / =C-u C-c .= |         |       |
    | Add tag                       | =C-c C-c=             |         |       |
    | Export                        | =C-c C-e=             |         |       |

** Helm
*** Setup
    Install =helm= if required and require =helm-config=.
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config
        (setq helm-split-window-in-side-p t))

      (global-set-key (kbd "M-x") #'helm-M-x)
      (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
      (global-set-key (kbd "C-x C-f") #'helm-find-files)
      (helm-mode 1)
    #+END_SRC
*** Useful Commands
    | Task | Cmd | Alt Cmd | Notes |
    |------+-----+---------+-------|
    |      |     |         |       |

** CEDET (Collection of Emacs Development Environment Tools)
*** Setup
    Require =CEDET=.
    #+BEGIN_SRC emacs-lisp
      (require 'cedet-global)
    #+END_SRC

    Enable =CEDET= semantic mode.
    #+BEGIN_SRC emacs-lisp
      (require 'semantic)

      (global-semanticdb-minor-mode 1)
      (global-semantic-idle-scheduler-mode 1)

      (semantic-mode 1)
    #+END_SRC

    Enable EDE globally.
    #+BEGIN_SRC emacs-lisp
      (global-ede-mode 1)
    #+END_SRC

    Load C/C++ project configuration files.
    #+BEGIN_SRC emacs-lisp
      (setq ede-custom-file (expand-file-name "cc-mode-projects.el" user-emacs-directory))
      (when (file-exists-p ede-custom-file)
        (load ede-custom-file))
    #+END_SRC

    Example =cc-mode-projects.el=.
    #+BEGIN_SRC
(ede-cpp-root-project "project_name"
		      :file "dir/to/project/project_root/Makefile"
		      :include-path '("user_include1"
				      "user_include2")
		      :system-include-path '("sys_include1"
					     "sys_include2"))
    #+END_SRC
*** Useful Commands
    | Task           | Cmd           | Alt Cmd | Notes |
    |----------------+---------------+---------+-------|
    | Create project | =M-x ede-new= |         |       |
 
** Yasnippet
*** Setup
    Install =yasnippet= and =yasnippet-snippets=.
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :config
        (yas-global-mode 1))

      (use-package yasnippet-snippets
        :ensure t)
    #+END_SRC
*** Useful Commands
    | Task               | Cmd                           | Alt Cmd     | Notes                  |
    |--------------------+-------------------------------+-------------+------------------------|
    | New snippet        | =M-x yas-new-snippet=         | =C-c / C-n= |                        |
    | Goto snippet       | =M-x yas-visit-snippet-file=  | =C-c / C-v= |                        |
    | Snippet major mode | =M-x snippet-mode=            |             | For editing snippets   |
    | Load snippet       | =M-x yas-load-snippet-buffer= | =C-c C-l=   | When in =snippet-mode= |
    | Try snippet        | =M-x yas-tryout-snippet=      | =C-c C-t=   | When in =snippet-mode= |

** Company Mode
*** Setup
    Install =company= if required and enable for all buffers.
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config
        (progn
          (add-hook 'after-init-hook 'global-company-mode)
          (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
          (setq company-idle-delay 0)) 
        (add-to-list 'company-backends 'company-yasnippet)
        (add-to-list 'company-backends 'company-semantic))
    #+END_SRC

    Enable =company-mode= for all buffers.
    #+BEGIN_SRC
     (add-hook 'after-init-hook 'global-company-mode)
    #+END_SRC
*** Useful Commands
    | Task                       | Cmd                    | Alt Cmd | Notes |
    |----------------------------+------------------------+---------+-------|
    | Select the n'th suggestion | =M-(n)=                |         |       |
    | Search through completions | =C-s= / =C-r= / =C-o=  |         |       |
    | Manual completion          | =M-x company-complete= |         |       |

** LSP (Language Server Protocol)
*** Setup
    Setup =lsp=.
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
        :ensure t
        :commands (lsp lsp-execute-code-action)
        :hook ((go-mode . lsp-deferred)
               (lsp-mode . lsp-enable-which-key-integration)
               (lsp-mode . lsp-diagnostics-modeline-mode))
        :bind ("C-c C-c" . #'lsp-execute-code-action)
        :custom
        (lsp-print-performance t)
        (lsp-log-io t)
        (lsp-diagnostics-modeline-scope :project)
        (lsp-file-watch-threshold 5000)
        (lsp-enable-file-watchers nil))
    #+END_SRC

    Setup =lsp-ui=.
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-ui
        :commands lsp-ui-mode
        :hook
        (lsp-mode . lsp-ui-mode))
    #+END_SRC

    Enable =company-lsp=.
    #+BEGIN_SRC
     (use-package company-lsp
       :ensure t
       :custom 
       (company-lsp-enable-snippet t)
       :after
       (company lsp-mode))
    #+END_SRC
*** Useful Commands
    | Task | Cmd | Alt Cmd | Notes |
    |------+-----+---------+-------|
    |      |     |         |       |

** Flycheck
   Install =flycheck= if required and use globally.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode))
   #+END_SRC

** Magit
   Install =magit= if required.
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC

** Diff-hl
   Ensure it's used.
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :config
       (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
       (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
       (add-hook 'git-commit-mode-hook 'turn-on-flyspell))
   #+END_SRC

** Projectile.
   Install =projectile= and globally enable.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (projectile-global-mode))
   #+END_SRC

** Key Quiz
   Require and install =key-quiz=.
   #+BEGIN_SRC emacs-lisp
     (use-package key-quiz
       :ensure t)
   #+END_SRC

* LaTeX
  Install =auctex= if required.
  #+BEGIN_SRC emacs-lisp
    (use-package auctex
      :defer t
      :ensure t
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'flycheck-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (setq TeX-PDF-mode t))
  #+END_SRC

* Haskell.
  Install =haskell-mode= if required.
  #+BEGIN_SRC emacs-lisp
    (use-package haskell-mode
      :ensure t
      :config
      (let ((new-extensions '("QuantifiedConstraints"
                              "DerivingVia"
                              "BlockArguments"
                              "DerivingStrategies"
                              "StandaloneKindSignatures")))
        (setq
         haskell-ghc-supported-extensions
         (append haskell-ghc-supported-extensions new-extensions)))
      (add-hook 'haskell-mode-hook
                (lambda ()
                  (haskell-doc-mode)
                  (turn-on-haskell-indent)))
      (add-hook 'haskell-mode-hook 'flycheck-mode)
      :bind
      (("C-c a c" . haskell-cabal-visit-file)
       ("C-c a i" . haskell-navigate-imports)
       ("C-c a I" . haskell-navigate-imports-return)))
  #+END_SRC

  Install =lsp-haskell=.
  #+BEGIN_SRC
    (use-package lsp-haskell
      :ensure t
      :hook
      (haskell-mode . lsp))
  #+END_SRC

  Use =stack-ghci=.
  #+BEGIN_SRC
    (setq haskell-process-type 'stack-ghci)
  #+END_SRC

  Install =haskell-snippets=.
  #+BEGIN_SRC emacs-lisp
    (use-package haskell-snippets
      :ensure t
      :after (haskell-mode yasnippet)
      :defer)
  #+END_SRC

  Require =inf-haskell= for =org=.
  #+BEGIN_SRC emacs-lisp
    (require 'inf-haskell)
  #+END_SRC

* Python
  Install =elpy= if required and enable.
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'flycheck-mode)
      (elpy-enable))
  #+END_SRC

  Install =py-autopep8= is required for PEP8 formatting.
  #+BEGIN_SRC emacs-lisp
    (use-package py-autopep8
      :ensure t
      :config
      (setq py-autopep8-options '("--max-line-length=80"))
      (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
  #+END_SRC

  Install =company-jedi= for Python autocompletion.
  #+BEGIN_SRC emacs-lisp
    (use-package company-jedi
      :ensure t
      :config
      (setq jedi:complete-on-dot t)
      (add-to-list 'company-backends 'company-jedi)
      (add-hook 'python-mode-hook 'jedi:setup))
  #+END_SRC

* C/C++
** Flyspell Hooks
   Add hooks for =flycheck= C and C++ mode.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-hook 
               (lambda () (setq flycheck-clang-language-standard "C11")))

     (add-hook 'c++-mode-hook 
               (lambda () (setq flycheck-clang-language-standard "c++17")))
   #+END_SRC

** Irony Mode
   Install =irony=.
   #+BEGIN_SRC emacs-lisp
     (use-package irony
       :ensure t
       :init
       (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
                                                       irony-cdb-clang-complete))

       :config
       (unless (irony--find-server-executable) (call-interactively #'irony-install-server))
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
   #+END_SRC

   Set =irony= as a =company= backend.
   #+BEGIN_SRC emacs-lisp
     (use-package company-irony
       :ensure t
       :config
       (eval-after-load 'company '(add-to-list 'company-backends 'company-irony)))
   #+END_SRC

   Add =flycheck= hook.
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-irony
       :ensure t
       :config
       (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
   #+END_SRC

   Add =eldoc= hook.
   #+BEGIN_SRC emacs-lisp
     (use-package irony-eldoc
       :ensure t
       :config
       (add-hook 'irony-mode-hook #'irony-eldoc))
   #+END_SRC

   Windows specific setup.
   #+BEGIN_SRC emacs-lisp
     (when (boundp 'w32-pipe-read-delay)
       (setq w32-pipe-read-delay 0))

                                             ;Set the buffer size to 64K on Windows (from the original 4K)
     (when (boundp 'w32-pipe-buffer-size)
       (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
   #+END_SRC

** RTags
   TODO
* YAML
  Use =yaml-mode=.
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC
